#pragma GCC optimize("-O3")
#include <bits/stdc++.h>
using namespace std;

static const unsigned char S_Box[16][16] = 
{
	{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
	{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
	{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
	{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
	{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
	{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
	{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
	{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
	{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
	{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
	{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
	{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
	{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
	{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
	{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
	{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
};

static const unsigned char RS_Box[16][16] = 
{
	{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
	{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
	{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
	{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
	{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
	{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
	{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
	{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
	{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
	{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
	{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
	{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
	{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
	{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
	{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
	{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
};

static const unsigned int Rcon[10] = {0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000};
static const unsigned char mixcol[4][4] = 
{
	{0x2, 0x3, 0x1, 0x1},
	{0x1, 0x2, 0x3, 0x1},
	{0x1, 0x1, 0x2, 0x3},
	{0x3, 0x1, 0x1, 0x2}
};
static const unsigned char rmixcol[4][4] =
{
	{0xe, 0xb, 0xd, 0x9},
	{0x9, 0xe, 0xb, 0xd},
	{0xd, 0x9, 0xe, 0xb},
	{0xb, 0xd, 0x9, 0xe}
};

unsigned int W[44];

unsigned char multi2(unsigned char s){
	if((s & 0x80) == 0){
		s <<= 1;
	}
	else s = (s << 1) ^ 0x1b;
	return s;
};

unsigned char multik(unsigned char a, unsigned char b){
	unsigned char tmp[8] = {a};
	for(int i = 1; i < 8; i++){
		tmp[i] = multi2(tmp[i-1]);
	}
	unsigned char t = (b & 0x1) * a;
	for(int i = 1; i < 8; i++){
		t ^= (((b >> i) & 0x01) * tmp[i]);
	}
	return t;
}
void AES_128_encode(unsigned char* p, unsigned char* out){
	unsigned char state[4][4];
	unsigned char sttmp[4][4];
	unsigned char tmp;
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			state[i][j] = p[(j << 2)+i] ^ ((W[j] >> ((3-i) << 3)) & 0xff);
		}
	}
	for(int i = 1; i < 11; i++){
		//byte change with S_box;
		for(int j = 0; j < 4; j++){
			for(int k = 0; k < 4; k++){
				state[j][k] = S_Box[state[j][k] >> 4][state[j][k] & 0xf];
			}
		}
		//line shift
		tmp = state[1][0];
		for(int j = 0; j < 3; j++)state[1][j] = state[1][j+1];
		state[1][3] = tmp;
		tmp = state[2][0];
		state[2][0] = state[2][2];
		state[2][2] = tmp;
		tmp = state[2][1];
		state[2][1] = state[2][3];
		state[2][3] = tmp;
		tmp = state[3][3];
		for(int j = 3; j > 0; j--)state[3][j] = state[3][j-1];
		state[3][0] = tmp;
		//column mix;
		if(i < 10){
			for(int j = 0; j < 4; j++){
				for(int k = 0; k < 4; k++){
					sttmp[j][k] = multik(mixcol[j][0], state[0][k]) ^ multik(mixcol[j][1], state[1][k]) ^ multik(mixcol[j][2], state[2][k]) ^ multik(mixcol[j][3], state[3][k]);
				}
			}
			memcpy(state, sttmp, sizeof(sttmp));
		}
		//xor
		for(int j = 0; j < 4; j++){
			for(int k = 0; k < 4; k++){
				state[j][k] ^= ((W[(i << 2)+k] >> ((3-j) << 3)) & 0xff);
			}
		}
	}
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			out[(j << 2)+i] = state[i][j];
		}
	}
}

void AES_128_decode(unsigned char* p, unsigned char* out){
	unsigned char state[4][4];
	unsigned char sttmp[4][4];
	unsigned char tmp;
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			state[i][j] = p[(j << 2)+i] ^ ((W[40+j] >> ((3-i) << 3)) & 0xff);
		}
	}
	for(int i = 1; i < 11; i++){
		//line shift
		tmp = state[1][3];
		for(int j = 3; j > 0; j--)state[1][j] = state[1][j-1];
		state[1][0] = tmp;
		tmp = state[2][0];
		state[2][0] = state[2][2];
		state[2][2] = tmp;
		tmp = state[2][1];
		state[2][1] = state[2][3];
		state[2][3] = tmp;
		tmp = state[3][0];
		for(int j = 0; j < 3; j++)state[3][j] = state[3][j+1];
		state[3][3] = tmp;

		//byte change with RS_box;
		for(int j = 0; j < 4; j++){
			for(int k = 0; k < 4; k++){
				state[j][k] = RS_Box[state[j][k] >> 4][state[j][k] & 0xf];
			}
		}

		//xor
		for(int j = 0; j < 4; j++){
			for(int k = 0; k < 4; k++){
				state[j][k] ^= ((W[((10-i) << 2)+k] >> ((3-j) << 3)) & 0xff);
			}
		}
		//column mix;
		if(i < 10){
			for(int j = 0; j < 4; j++){
				for(int k = 0; k < 4; k++){
					sttmp[j][k] = multik(rmixcol[j][0], state[0][k]) ^ multik(rmixcol[j][1], state[1][k]) ^ multik(rmixcol[j][2], state[2][k]) ^ multik(rmixcol[j][3], state[3][k]);
				}
			}
			memcpy(state, sttmp, sizeof(sttmp));
		}
	}
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			out[(j << 2)+i] = state[i][j];
		}
	}
}

unsigned int funcT(unsigned int w, int j){
	w = (w << 8) | (w >> 24);
	unsigned char t[4];
	for(int i = 0; i < 4; i++){
		t[i] = (w >> ((3-i) << 3)) & 0xff;
		t[i] = S_Box[t[i] >> 4][t[i] & 0xf];
	}
	unsigned int ans = (t[0] << 24) | (t[1] << 16) | (t[2] << 8) | t[3];
	ans ^= Rcon[j-1];
	return ans;
}

void expand_k(unsigned char* k){
	for(int i = 0; i < 4; i++){
		W[i] = (k[4*i] << 24) | (k[4*i + 1] << 16) | (k[4*i + 2] << 8) | k[4*i + 3];
	}
	for(int i = 1; i < 11; i++){
		W[4*i] = W[4*i-4] ^ funcT(W[4*i-1], i);
		W[4*i+1] = W[4*i] ^ W[4*i-3];
		W[4*i+2] = W[4*i+1] ^ W[4*i-2];
		W[4*i+3] = W[4*i+2] ^ W[4*i-1];
	}
}

int main(){
	/*
	unsigned char p[32] = {'c','h','e','n','g','y','u','a','1','7','2','0','1','7','0','1','c','h','e','n','g','y','u','a','1','7','2','0','1','7','0','1'};
	unsigned char out[16];

	unsigned char key[16] = {'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a'};
	unsigned char IV[16] = {'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a'};
	expand_k(key);
	for(int i = 0; i < 16; i++)p[i] ^= IV[i];
	AES_128_encode(p, out);
	for(int i = 0; i < 16; i++){
		printf("%02x", out[i]);
		p[i] = out[i];
	}
	for(int i = 0; i < 16; i++)p[i+16] ^= out[i];
	AES_128_encode(p+16, out);
	for(int i = 0; i < 16; i++){
		printf("%02x", out[i]);
		p[i+16] = out[i];
	}
	printf("\n");
	AES_128_decode(p, out);
	for(int i = 0; i < 16; i++){
		out[i] ^= IV[i];
		printf("%c", out[i]);
	}
	AES_128_decode(p+16, out);
	for(int i = 0; i < 16; i++){
		out[i] ^= p[i];
		printf("%c", out[i]);
	}
	*/
	FILE *fp = NULL;
	FILE *fpout = NULL;
	FILE *fpout2 = NULL;
	fp = fopen("input.txt", "w+");
	fpout = fopen("output_AES.txt", "w+");
	fpout2 = fopen("decrypt_AES.txt", "w+");
	unsigned char p[2048];
	unsigned char out[2048];
	unsigned char IV[16];
	unsigned char key[16];
	for(int i = 0; i < 2048; i++){
		p[i] = rand() % 256;
		fprintf(fp, "%02x", p[i]);
	}
	for(int i = 0; i < 16; i++){
		IV[i] = rand() % 256;
		key[i] = rand() % 256;
	}
	expand_k(key);
	//Encryption
//	clock_t start, end;
//	double total;
//	start = clock();
//	for(int k = 0; k < 6400; k++){
		for(int i = 0; i < 128; i++){
			if(i == 0){
				for(int j = 0; j < 16; j++){
					p[j] ^= IV[j];
				}
				AES_128_encode(p, out);
			}
			else{
				for(int j = 0; j < 16; j++){
					p[i*16+j] ^= out[(i-1)*16 + j];
				}
				AES_128_encode(p+i*16, out+i*16);
			}
		}
//	}
//	end = clock();
//	total += (double)(end - start);
//	cout << "The run time is: " << 1000 * total / CLOCKS_PER_SEC << "ms" << endl;
	for(int i = 0; i < 2048; i++){
		fprintf(fpout, "%02x", out[i]);
	}
	//Decryption
	for(int i = 0; i < 128; i++){
		if(i == 0){
			AES_128_decode(out, p);
			for(int j = 0; j < 16; j++){
				p[j] ^= IV[j];
			}
		}
		else{
			AES_128_decode(out+i*16, p+i*16);
			for(int j = 0; j < 16; j++){
				p[i*16+j] ^= out[(i-1)*16 + j];
			}
		}
	}
	for(int i = 0; i < 2048; i++){
		fprintf(fpout2, "%02x", p[i]);
	}
	return 0;
}